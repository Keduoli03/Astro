---
const { slug, title, body } = Astro.props;
const apiBaseUrl = "https://vercel-cf-summary.vercel.app/api/proxy";
---

<div id={`ai-summary-${slug}`} class="mb-6 p-4 bg-gray-100 rounded-lg">
  <b class="block mb-2">AI摘要</b>
  <p id={`ai-summary-text-${slug}`}>正在生成中...</p>
</div>

<!-- 添加分割线 -->
<div class="border-[var(--line-divider)] border-dashed border-b-[3px] mb-6"></div>

<script is:inline define:vars={{ slug, title, body, apiBaseUrl }}>
// SHA256 哈希函数
async function sha256(str) {
  const encoder = new TextEncoder();
  const data = encoder.encode(str);
  const hashBuffer = await crypto.subtle.digest('SHA-256', data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

// 添加延迟确保DOM完全加载
setTimeout(async () => {
  const container = document.getElementById(`ai-summary-${slug}`);
  const outputEl = document.getElementById(`ai-summary-text-${slug}`);
  
  if (!container || !outputEl) {
    console.error('容器元素未找到');
    return;
  }

  try {
    // 1. 获取文章完整文本
    const articleText = `标题：${title}\n\n${body}`;

    
    // 2. 计算内容的SHA256哈希
    const contentHash = await sha256(articleText);


    // 3. 检查内容是否已上传且未变更
    const checkUrl = `${apiBaseUrl}/is_uploaded?id=${encodeURIComponent(slug)}&sign=${encodeURIComponent(contentHash)}`;
    
    const checkRes = await fetch(checkUrl);
    const isUploaded = await checkRes.text();
    
    // 4. 如果内容未上传或已变更，则上传新内容
    if (isUploaded !== 'yes') {
      const uploadUrl = `${apiBaseUrl}/upload_blog?id=${encodeURIComponent(slug)}`;
      
      const uploadRes = await fetch(uploadUrl, {
        method: 'POST',
        body: articleText,
        headers: { 'Content-Type': 'text/plain' }
      });
      
      if (!uploadRes.ok) {
        throw new Error(`上传失败: ${uploadRes.status}`);
      }
    }

    // 5. 尝试获取已缓存的摘要
    const getSummaryUrl = `${apiBaseUrl}/get_summary?id=${encodeURIComponent(slug)}&sign=${encodeURIComponent(contentHash)}`;
    
    const summaryRes = await fetch(getSummaryUrl);
    const cachedSummary = await summaryRes.text();
    
    if (cachedSummary && cachedSummary !== 'no') {
      outputEl.textContent = cachedSummary;
    } else {
      // 没有缓存的摘要，生成新摘要
      console.log('生成新摘要...');
      outputEl.textContent = '正在生成摘要，请稍候...';
      
      const streamUrl = `${apiBaseUrl}/summary?id=${encodeURIComponent(slug)}`;
      const streamRes = await fetch(streamUrl);
      
      if (!streamRes.ok) {
        throw new Error(`生成摘要失败: ${streamRes.status}`);
      }
      
      // 处理流式响应
      const reader = streamRes.body?.getReader();
      if (!reader) {
        throw new Error('无法读取响应流');
      }
      
      let summary = '';
      const decoder = new TextDecoder();
      outputEl.textContent = '';
      
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        
        const chunk = decoder.decode(value);
        const lines = chunk.split('\n');
        
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6);
            if (data === '[DONE]') continue;
            
            try {
              const parsed = JSON.parse(data);
              if (parsed.response) {
                summary += parsed.response;
                outputEl.textContent = summary;
              }
            } catch (e) {
              // 忽略解析错误
            }
          }
        }
      }
      

    }
    
  } catch (err) {
    console.error('AI摘要生成失败:', err);
    outputEl.textContent = `摘要生成失败: ${err.message}`;
    outputEl.style.color = 'red';
  }
}, 500); // 500ms延迟确保DOM就绪
</script>