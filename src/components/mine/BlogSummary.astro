---
// 服务器端代码块：数据预处理
import { getSortedPosts } from "@utils/content-utils";

// 确保导入MarkdownIt（如果需要处理Markdown内容）
import MarkdownIt from "markdown-it";
const md = new MarkdownIt();

// 获取文章数据
const posts = await getSortedPosts();

// 基础统计数据
const totalPosts = posts.length || 0;
let totalWords = 0;

// 计算总字数
posts.forEach(post => {
  // 确保内容存在且可处理
  const content = post.body || '';
  const text = md.render(content.toString())
    .replace(/<[^>]*>/g, '')
    .replace(/[#*_\-\[\]!`]/g, '')
    .replace(/\s+/g, ' ');
  
  // 计算中文字符和英文字数
  const chineseChars = text.match(/[\u4e00-\u9fa5]/g) || [];
  const englishWords = text.replace(/[\u4e00-\u9fa5]/g, '').split(/\s+/).filter(w => w.length > 0);
  
  totalWords += chineseChars.length + englishWords.length;
});

// 计算平均字数（避免除以零）
const avgWordsPerPost = totalPosts > 0 
  ? Math.round(totalWords / totalPosts) 
  : 0;

// 获取当前年份
const currentYear = new Date().getFullYear();

// 年度文章统计
const yearStats = posts.reduce((acc, post) => {
  // 确保有发布日期
  const publishedDate = post.data?.published || new Date();
  const year = new Date(publishedDate).getFullYear();
  acc[year] = (acc[year] || 0) + 1;
  return acc;
}, {});

// 按年份排序（从最近到最远）
const years = Object.keys(yearStats).sort((a, b) => b - a);
const yearCounts = years.map(year => yearStats[year]);

// 服务器端代码：颜色生成部分
const generateUniqueColors = (count) => {
  const colors = new Set();
  const goldenRatio = 0.618033988749895; // 黄金比例，用于颜色分布
  
  // 生成固定数量的唯一颜色
  for (let i = 0; i < count; i++) {
    // 使用黄金比例确保颜色间隔均匀
    const hue = Math.floor(((i * goldenRatio) % 1) * 360);
    const saturation = 75 + Math.floor(Math.random() * 15); // 75-90%
    const lightness = 60 + Math.floor(Math.random() * 10); // 60-70%
    
    const color = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
    colors.add(color);
  }
  
  return Array.from(colors);
};

// 生成完全不重复的随机颜色
const backgroundColors = generateUniqueColors(years.length);
---

<div class="stats-container flex flex-col md:flex-row gap-6 max-w-6xl mx-auto p-4">
  <!-- 左侧统计卡片 -->
  <div class="blog-stats w-full md:w-1/2 bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden">
    <div class="p-6">
      <h2 class="text-xl font-bold mb-4 text-gray-800 flex items-center">
        <i class="fa fa-bar-chart mr-2 text-blue-500"></i> 博客统计
      </h2>
      <ul class="space-y-4 text-gray-700">
        <li class="flex justify-between items-center pb-2 border-b border-gray-100">
          <span class="text-sm font-medium">文章总数</span>
          <span class="text-xl font-semibold text-blue-600">{totalPosts}</span>
        </li>
        <li class="flex justify-between items-center pb-2 border-b border-gray-100">
          <span class="text-sm font-medium">总字数</span>
          <span class="text-xl font-semibold text-blue-600">{totalWords.toLocaleString()}</span>
        </li>
        <li class="flex justify-between items-center pb-2 border-b border-gray-100">
          <span class="text-sm font-medium">平均字数</span>
          <span class="text-xl font-semibold text-blue-600">{avgWordsPerPost}</span>
        </li>
        <li class="flex justify-between items-center">
          <span class="text-sm font-medium">{currentYear}年文章数</span>
          <span class="text-xl font-semibold text-blue-600">{yearStats[currentYear] || 0}</span>
        </li>
      </ul>
    </div>
    <div class="bg-blue-50 px-6 py-3 text-sm text-blue-600 flex items-center">
      <i class="fa fa-refresh mr-1"></i> 上次更新: {new Date().toLocaleDateString()}
    </div>
  </div>

  <!-- 右侧ECharts饼图 -->
  <div class="pie-chart-container w-full md:w-1/2 bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden">
    <div class="p-6">
      <h2 class="text-xl font-bold mb-4 text-gray-800 flex items-center">
        <i class="fa fa-pie-chart mr-2 text-indigo-500"></i> 年度文章分布
      </h2>
      <div class="chart-wrapper relative h-64" style="min-height: 300px;">
        <div 
          id="yearPieChart" 
          class="w-full h-full"
          data-chart-data={JSON.stringify(yearCounts)}
          data-chart-labels={JSON.stringify(years)}
          data-chart-colors={JSON.stringify(backgroundColors)}
        ></div>
      </div>
      <div class="legend mt-4 grid grid-cols-2 gap-2">
        {years.map((year, index) => (
          <div class="flex items-center" key={year}>
            <span 
              class="inline-block w-3 h-3 mr-2 rounded-full" 
              style={{ backgroundColor: backgroundColors[index] }}
            ></span>
            <span class="text-sm">{year}年: {yearCounts[index]}篇</span>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<!-- 引入外部CDN资源 -->
<script context="client" src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>

<script context="client" is:inline>
  window.addEventListener('load', () => {
    const chartDom = document.getElementById('yearPieChart');
    if (!chartDom) return;
    
    // 检查ECharts是否成功加载
    if (!window.echarts) {
      chartDom.innerHTML = '<div class="text-center text-red-500 mt-10">图表库加载失败，请检查网络连接</div>';
      return;
    }
    
    // 获取数据
    const data = JSON.parse(chartDom.getAttribute('data-chart-data') || '[]');
    const labels = JSON.parse(chartDom.getAttribute('data-chart-labels') || '[]');
    const colors = JSON.parse(chartDom.getAttribute('data-chart-colors') || '[]');
    
    // 验证数据有效性
    if (data.length === 0 || labels.length === 0) {
      chartDom.innerHTML = '<div class="text-center text-gray-500 mt-10">暂无文章数据</div>';
      return;
    }
    
    // 初始化ECharts实例
    const myChart = echarts.init(chartDom);
    
    // 配置图表
    const option = {
      color: colors,
      tooltip: {
        trigger: 'item',
        formatter: '{a} <br/>{b}: {c}篇 ({d}%)',
        backgroundColor: 'rgba(255, 255, 255, 0.9)',
        textStyle: { color: '#333' },
        borderColor: '#eee',
        borderWidth: 1
      },
      series: [
        {
          name: '文章分布',
          type: 'pie',
          radius: ['40%', '70%'],
          center: ['50%', '50%'],
          data: labels.map((label, index) => ({
            value: data[index],
            name: `${label}年`,
            itemStyle: {
              color: colors[index],
              shadowBlur: 200,
              shadowColor: 'rgba(0, 0, 0, 0.1)'
            }
          })),
          label: {
            show: true,
            formatter: '{b}: {d}%',
            textStyle: {
              fontSize: 12,
              color: '#666'
            }
          },
          emphasis: {
            itemStyle: {
              shadowBlur: 10,
              shadowOffsetX: 0,
              shadowColor: 'rgba(0, 0, 0, 0.5)'
            }
          },
          animationType: 'scale',
          animationEasing: 'elasticOut',
          animationDuration: 1000
        }
      ]
    };
    
    // 设置图表配置
    myChart.setOption(option);
    
    // 窗口大小变化时重绘图表
    window.addEventListener('resize', () => myChart.resize());
  });
</script>

<style>
.stats-container {
  max-width: 1200px;
  margin: 0 auto;
}

.chart-wrapper {
  position: relative;
  height: 300px;
  width: 100%;
}

.legend span {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* 动画效果 */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.blog-stats, .pie-chart-container {
  animation: fadeIn 0.5s ease-out forwards;
  opacity: 0;
}

.blog-stats {
  animation-delay: 0.1s;
}

.pie-chart-container {
  animation-delay: 0.2s;
}

.blog-stats {
  flex: 1; /* 弹性增长 */
  min-height: 360px; /* 设置最小高度 */
  display: flex; /* 启用flex布局 */
  flex-direction: column; /* 垂直排列内容 */
}

.blog-stats > div:first-child {
  flex-grow: 1; /* 中间内容撑满空间 */
}

.blog-stats .bg-blue-50 {
  margin-top: auto; /* 推到底部 */
  border-top: 1px solid #e5e7eb; /* 添加顶部边框 */
}
</style>