---
// 服务器端代码块：数据预处理
import { getSortedPosts } from "@utils/content-utils";
import MarkdownIt from "markdown-it";
const md = new MarkdownIt();

// 专业字数统计函数（支持中日韩全字符集+英文单词过滤）
function countWords(markdownText: string): number {
  // 1. 渲染Markdown并移除HTML标签
  const html = md.render(markdownText);
  const text = html.replace(/<[^>]+>/g, ' ');

  // 2. 清理特殊符号（保留空格分隔符）
  const cleaned = text
    .replace(/[`~@#$%^&*()_|+\-=;:'"<>{}[\]\\]/g, ' ')
    .replace(/[！？。，、；：“”‘’（）【】…—～《》・]/g, ' ');

  // 3. 统计中文字符（包含扩展区字符）
  const cjkRegex = /[\u4e00-\u9fff\u3400-\u4dbf\uf900-\ufaff]/g;
  const cjkChars = (cleaned.match(cjkRegex) || []).length;

  // 4. 统计英文单词（至少2个字母，忽略单字母/数字）
  const englishRegex = /\b[A-Za-z]{2,}\b/g;
  const englishWords = (cleaned.match(englishRegex) || []).length;

  return cjkChars + englishWords;
}

// 获取文章数据
const posts = await getSortedPosts();

// 基础统计数据
const totalPosts = posts.length || 0;
let totalWords = 0;

// 应用新统计函数
posts.forEach(post => {
  const content = post.body || '';
  totalWords += countWords(content);
});

// 计算平均字数
const avgWordsPerPost = totalPosts > 0 ? Math.floor(totalWords / totalPosts) : 0;

// 年度统计
const currentYear = new Date().getFullYear();
const yearStats = posts.reduce((acc, post) => {
  const publishedDate = post.data?.published || new Date();
  const year = new Date(publishedDate).getFullYear();
  acc[year] = (acc[year] || 0) + 1;
  return acc;
}, {});

// 按年份排序
const years = Object.keys(yearStats).sort((a, b) => b - a);
const yearCounts = years.map(year => yearStats[year]);

// 生成颜色
const generateUniqueColors = (count) => {
  const colors = new Set();
  const goldenRatio = 0.618033988749895;
  for (let i = 0; i < count; i++) {
    const hue = Math.floor(((i * goldenRatio) % 1) * 360);
    const saturation = 75 + Math.floor(Math.random() * 15);
    const lightness = 60 + Math.floor(Math.random() * 10);
    colors.add(`hsl(${hue}, ${saturation}%, ${lightness}%)`);
  }
  return Array.from(colors);
};
const backgroundColors = generateUniqueColors(years.length);
---

<div class="stats-container flex flex-col md:flex-row gap-6 max-w-6xl mx-auto p-4">
  <!-- 左侧统计卡片（修改后） -->
  <div class="stats-card w-full md:w-1/2 bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden flex flex-col">
    <div class="p-6 flex-grow">
      <h2 class="text-xl font-bold mb-4 text-gray-800 flex items-center">
        <i class="fa fa-bar-chart mr-2 text-blue-500"></i> 博客统计
      </h2>
      <ul class="space-y-4 text-gray-700">
        <li class="flex justify-between items-center pb-2 border-b border-gray-100">
          <span class="text-sm font-medium">文章总数</span>
          <span class="text-xl font-semibold text-blue-600">{totalPosts}</span>
        </li>
        <li class="flex justify-between items-center pb-2 border-b border-gray-100">
          <span class="text-sm font-medium">总字数</span>
          <span class="text-xl font-semibold text-blue-600">{totalWords.toLocaleString()}</span>
        </li>
        <li class="flex justify-between items-center pb-2 border-b border-gray-100">
          <span class="text-sm font-medium">平均字数</span>
          <span class="text-xl font-semibold text-blue-600">{avgWordsPerPost}</span>
        </li>
        <li class="flex justify-between items-center">
          <span class="text-sm font-medium">{currentYear}年文章数</span>
          <span class="text-xl font-semibold text-blue-600">{yearStats[currentYear] || 0}</span>
        </li>
      </ul>
    </div>
    <!-- 底部区域添加mt-auto -->
    <div class="bg-blue-50 px-6 py-3 text-sm text-blue-600 flex items-center mt-auto border-t border-gray-100">
      <i class="fa fa-refresh mr-1"></i> 上次更新: {new Date().toLocaleDateString()}
    </div>
  </div>


  <!-- 右侧ECharts饼图（重点优化部分） -->
  <div class="pie-chart-container w-full md:w-1/2 bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden">
    <div class="p-6">
      <h2 class="text-xl font-bold mb-2 text-gray-800 flex items-center">
        <i class="fa fa-pie-chart mr-2 text-indigo-500"></i> 年度文章分布
        <button 
          id="chartRefreshBtn"
          class="ml-3 text-sm text-indigo-500 hover:text-indigo-700"
          onclick="chartManager.refresh()">
          <i class="fa fa-refresh mr-1"></i> 刷新
        </button>
      </h2>

      <!-- 图表容器（带加载状态） -->
      <div class="chart-wrapper mb-6 relative" style="height: 300px;">
        <div id="yearPieChart" 
             class="w-full h-full bg-gray-50 rounded-lg overflow-hidden"
             data-chart-data={JSON.stringify(yearCounts)}
             data-chart-labels={JSON.stringify(years)}
             data-chart-colors={JSON.stringify(backgroundColors)}>
          <!-- 加载状态默认显示 -->
          <div class="loading-state absolute inset-0 flex items-center justify-center bg-white/80 z-10">
            <div class="text-center">
              <i class="fa fa-spinner fa-spin text-2xl text-indigo-500 mb-2"></i>
              <p class="text-gray-500 text-sm">加载图表中...</p>
            </div>
          </div>
        </div>
      </div>

      <!-- 图例 -->
      <div class="legend grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mt-4">
        {years.map((year, index) => (
          <div class="flex items-center gap-1" key={year}>
            <span class="w-3 h-3 rounded-full mr-1.5" style={{ backgroundColor: backgroundColors[index] }}></span>
            <span class="text-xs truncate">{year}年: {yearCounts[index]}篇</span>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<!-- 引入ECharts -->
<script context="client" src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>

<script is:inline>
// 图表管理核心对象（完整优化版）
const chartManager = {
  instance: null,
  resizeHandler: null,
  isInitialized: false,
  refreshAttempts: 0,
  maxRefreshAttempts: 3,
  mutationObserver: null,

  init() {
    const chartDom = document.getElementById('yearPieChart');
    if (!chartDom) return;

    // 清理旧实例
    this.destroy();
    
    // 重置状态
    this.refreshAttempts = 0;
    this.isInitialized = false;
    
    // 显示加载状态
    this.showLoading(chartDom);
    
    // 异步初始化（避免同步阻塞）
    setTimeout(() => this.tryInitChart(chartDom), 50);
  },

  tryInitChart(chartDom) {
    try {
      // 检查ECharts是否加载
      if (typeof echarts === 'undefined') {
        console.warn('ECharts未加载，正在加载...');
        return this.loadECharts();
      }

      // 获取数据
      const { data, labels, colors } = this.getChartData(chartDom);
      if (data.length === 0) {
        console.warn('没有可用的图表数据');
        this.showEmptyState(chartDom);
        return;
      }

      // 清除加载状态
      this.hideLoading(chartDom);

      // 初始化图表
      this.instance = echarts.init(chartDom);
      this.setupChart(data, labels, colors);
      this.setupResizeHandler();
      this.isInitialized = true;
      
      // 添加加载成功动画
      chartDom.classList.add('animate-fadeIn');
      
    } catch (error) {
      console.error('图表初始化失败:', error);
      this.refreshAttempts++;
      
      if (this.refreshAttempts < this.maxRefreshAttempts) {
        console.log(`尝试重新初始化图表 (${this.refreshAttempts}/${this.maxRefreshAttempts})`);
        setTimeout(() => this.tryInitChart(chartDom), 300);
      } else {
        this.showErrorState(chartDom, error);
      }
    }
  },

  getChartData(chartDom) {
    try {
      return {
        data: JSON.parse(chartDom.dataset.chartData || '[]'),
        labels: JSON.parse(chartDom.dataset.chartLabels || '[]'),
        colors: JSON.parse(chartDom.dataset.chartColors || '[]')
      };
    } catch (e) {
      console.error('图表数据解析失败:', e);
      return { data: [], labels: [], colors: [] };
    }
  },

  setupChart(data, labels, colors) {
    this.instance.setOption({
      color: colors,
      tooltip: {
        trigger: 'item',
        formatter: '{b}: {c}篇 ({d}%)'
      },
      series: [{
        name: '文章分布',
        type: 'pie',
        radius: ['50%', '70%'],
        center: ['50%', '50%'],
        avoidLabelOverlap: false,
        itemStyle: {
          borderColor: '#fff',
          borderWidth: 1
        },
        label: {
          show: true,
          formatter: '{b}: {d}%',
          textStyle: {
          fontSize: 10, // 调整字体大小（默认14px）
        }
        },
        labelLine: {
          show: true
        },
        data: labels.map((label, i) => ({
          value: data[i],
          name: `${label}年`,
          itemStyle: { color: colors[i] }
        }))
      }]
    });
  },

  setupResizeHandler() {
    this.resizeHandler = () => this.instance?.resize();
    window.addEventListener('resize', this.resizeHandler);
    
    // 清理事件
    this.instance.on('disposed', () => {
      window.removeEventListener('resize', this.resizeHandler);
    });
  },

  loadECharts() {
    if (document.querySelector('script[src*="echarts"]')) return;
    
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js';
    script.onload = () => setTimeout(() => this.init(), 100);
    document.head.appendChild(script);
  },

  destroy() {
    if (this.instance) {
      this.instance.dispose();
      this.instance = null;
    }
    if (this.resizeHandler) {
      window.removeEventListener('resize', this.resizeHandler);
      this.resizeHandler = null;
    }
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
      this.mutationObserver = null;
    }
    this.isInitialized = false;
  },

  refresh() {
    const chartDom = document.getElementById('yearPieChart');
    if (chartDom) {
      this.init(); // 重新初始化
    }
  },

  showLoading(chartDom) {
    const loadingEl = chartDom.querySelector('.loading-state');
    if (loadingEl) loadingEl.style.display = 'flex';
  },

  hideLoading(chartDom) {
    const loadingEl = chartDom.querySelector('.loading-state');
    if (loadingEl) loadingEl.style.display = 'none';
  },

  showEmptyState(chartDom) {
    this.hideLoading(chartDom);
    chartDom.innerHTML = `
      <div class="flex h-full flex-col items-center justify-center text-gray-400 bg-white">
        <i class="fa fa-chart-pie text-5xl mb-4 opacity-30"></i>
        <p class="text-sm">暂无文章数据</p>
      </div>
    `;
  },

  showErrorState(chartDom, error) {
    this.hideLoading(chartDom);
    chartDom.innerHTML = `
      <div class="flex h-full flex-col items-center justify-center p-4 bg-white">
        <i class="fa fa-exclamation-circle text-4xl mb-3 text-red-500"></i>
        <p class="text-sm text-center mb-2">图表加载失败</p>
        <p class="text-xs text-gray-500 mb-4">错误: ${error.message || '未知错误'}</p>
        <button 
          class="px-3 py-1 text-xs text-indigo-600 border border-indigo-200 rounded hover:bg-indigo-50"
          onclick="chartManager.refresh()">
          点击重试
        </button>
      </div>
    `;
  }
};

// 页面加载初始化
const initOnLoad = () => {
  if (document.readyState === 'complete') {
    chartManager.init();
  } else {
    document.addEventListener('DOMContentLoaded', () => chartManager.init());
  }
};

// Astro页面切换事件（核心刷新逻辑）
document.addEventListener('astro:after-swap', () => {
  console.log('页面切换事件触发，刷新图表');
  chartManager.refresh();
  
  // 监听DOM变化确保图表容器加载完成
  this.mutationObserver = new MutationObserver((mutations) => {
    const chartDom = document.getElementById('yearPieChart');
    if (chartDom) {
      chartManager.refresh();
      this.mutationObserver.disconnect();
    }
  });
  
  this.mutationObserver.observe(document.body, {
    childList: true,
    subtree: true
  });
  
  // 超时自动断开观察器
  setTimeout(() => {
    if (this.mutationObserver) this.mutationObserver.disconnect();
  }, 2000);
});

// 页面可见性变化监听（切回浏览器时刷新）
document.addEventListener('visibilitychange', () => {
  if (document.visibilityState === 'visible') {
    chartManager.refresh();
  }
});

// 窗口大小变化时重新渲染（优化响应式）
window.addEventListener('resize', () => {
  if (chartManager.instance) chartManager.instance.resize();
});

// 初始化执行
initOnLoad();
</script>

<style>
.stats-container {
  max-width: 1200px;
  margin: 0 auto;
}

.chart-wrapper {
  width: 100% !important;
  height: 280px !important;
  position: relative;
}

.legend {
  width: 100% !important;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  gap: 8px;
  justify-items: start;
}

/* 动画样式 */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.animate-fadeIn {
  animation: fadeIn 0.6s ease-out forwards;
}

.loading-state {
  display: none;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
</style>